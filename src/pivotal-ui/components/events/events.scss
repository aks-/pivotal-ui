/*doc
---
title: Event Handling
name: event_handling
categories:
  - css_base_eventhandling
---

Event handling in our system is handled through a document level message bus.
This system works by publishing events when a component performs an action and
letting that action bubble up to the `document`. If another component needs to
interact with the first component, it can listen for that component's events
at the `document` level.

Example:

Component `FormStepper` has a method `set`. In the code, you might see:


<code class="pam">
FormStepper.prototype.set = function(){
  $(this).trigger("FormStepper:changed:before");
  //do things

  // this represent the element the component is referring to

  // In many cases the method name is present tense and the event
  // name is a past tense version of that method name. This is
  // a pretty common pattern reflected here.
  $(this).trigger("FormStepper:changed");
};
</code>

In another component `SVGeople`, we have a method `addPeople`. We know that when the `FormStepper`
component has the `set` method called and that method is completed, the `SVGeople`
component needs to call the `addPeople` method.

<code class="pam">
$(document).on("FormStepper:changed", function(){
  sveople.addPeople();
});
</code>



*/

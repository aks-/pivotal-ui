@import "../pui-variables";

/*doc
---
title: Viewport Pane
name: viewport_pane
categories:
 - css_utilities_panes
 - css_all
---

<code class="pam">
<i class="fa fa-download" alt="Install the Component">
npm install @npmcorp/pui-css-viewport-panes --save
</i>
</code>

Viewport panes are type of [pane](/pane.html) that have a height that is based upon
the height of your viewport. They require being the pane directly following the `<header>`.

You can add the `.viewport-pane` class to the top pane of a layout.

```html_example
<header>
  <h1>This is the header</h1>
</header>
<div class="pane bg-dark-2 viewport-pane">
  <div class="container bg-glow">
    <h1 class="type-neutral-11">This is a pane</h1>
  </div>
</div>

```

For a viewport pane that shows just enough that there is a fold below, use `.viewport-pane-long`:

```html_example
<header>
  <h1>This is the header</h1>
</header>
<div class="pane bg-dark-2 viewport-pane-long">
  <div class="container bg-glow">
    <h1 class="type-neutral-11">This is a pane</h1>
  </div>
</div>
```

When following a transparent header, the viewport-pane class will allow the pane's color
to come through

```
<header class="hero-transparent">
  <h1>This is the header, you can see the pane below me, through this</h1>
</header>
<div class="pane bg-dark-2 viewport-pane">
  <div class="container bg-glow">
    <h1 class="type-neutral-11">This is a pane</h1>
  </div>
</div>
```

In the case where you'd like the viewport to not show up at certain viewport sizes, you can use
`not-full-viewport-*` syntax.

These situations all assume a scenario where the viewport height at least `600px`.
<table class="styleguide">
  <thead>
    <tr>
      <th></th>
      <th>
        Extra small devices
        <small>Phones (&lt;768px)</small>
      </th>
      <th>
        Small devices
        <small>Tablets (&geq;768px)</small>
      </th>
      <th>
        Medium devices
        <small>Desktops (&geq;992px)</small>
      </th>
      <th>
        Large devices
        <small>Desktops (&geq;1200px)</small>
      </th>
      <th>
        Extra large devices
        <small>Desktops (&geq;1600px)</small>
      </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th class="no-wrap"><code>.not-full-viewport-xs</code></th>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.not-full-viewport-sm</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.not-full-viewport-md</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.not-full-viewport-lg</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
      <td class="is-visible">Visible</td>
    </tr>
    <tr>
      <th class="no-wrap"><code>.not-full-viewport-xl</code></th>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-visible">Visible</td>
      <td class="is-hidden">Hidden</td>
    </tr>
  </tbody>
</table>



*/

.viewport-pane,
.viewport-pane-long {
  min-height: calc(100vh - #{$header-height-max-sm});
}

.hero-transparent + .viewport-pane {
  box-sizing: content-box;
}

@media (min-height: $screen-height-sm) {
  .viewport-pane {
    min-height: calc(75vh - #{$header-height-max-lg});
  }
  .viewport-pane-long {
    min-height: calc(100vh - 2em - #{$header-height-max-lg});
  }
}

@media (min-height: $screen-height-sm) and (max-width: $screen-xs-max) {
  .viewport-pane.not-full-viewport-xs {
    min-height: 0 !important;
  }
}

@media (min-height: $screen-height-sm) and (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
  .viewport-pane.not-full-viewport-sm {
    min-height: 0 !important;
  }
}

@media (min-height: $screen-height-sm) and (min-width: $screen-md-min) and (max-width: $screen-md-max) {
  .viewport-pane.not-full-viewport-md {
    min-height: 0 !important;
  }
}

@media (min-height: $screen-height-sm) and (min-width: $screen-lg-min) and (max-width: $screen-lg-max) {
  .viewport-pane.not-full-viewport-lg {
    min-height: 0 !important;
  }
}

@media (min-height: $screen-height-sm) and (min-width: $screen-xl-min) {
  .viewport-pane.not-full-viewport-xl {
    min-height: 0 !important;
  }
}
